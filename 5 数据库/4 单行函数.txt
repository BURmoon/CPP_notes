## 1 单行函数

- 只对一行进行变换，产生一个结果
- 函数可以没有参数，但必须要有返回值

## 2 字符函数

- 大小写控制函数，主要有lower、upper、initcap

  ```
  select lower('HeLlo, WORld') 转小写 
  	upper('HellO, woRld') 转大写 
  	initcap('hello, world') 首字母大写 
  	from dual
  ```

- 字符控制函数

  > CONCAT、SUBSTR、LENGTH/LENGTHB、INSTR、LPAD | RPAD、TRIM、REPLACE

  - substr(a, b)：从a中，第b位开始取(计数从1开始)，取到结尾

    `select substr('helloworld', 3) from dual`

  - substr(a, b, c)：从a中，第b位开始，向右取c位

    `select substr('hello world', 3, 5) from dual`

  - length：字符数， lengthb：字节数

    `select length('hello world') 字符数 lengthb('hello world') 字节数 from dual`

  - instr：在母串中查找子串，找到返回下标，计数从1开始，没有返回0

    `select instr('hello world', 'llo') from dual`

  - lpad：左填充，参1：待填充的字符串，参2：填充后字符串的总长度(字节)， 参3：填充内容 

    rpad：右填充

    `select lpad('abcd', 10, '*'),rpad('abcd', 10, '#') from dual`

  - trim：去掉前后指定的字符

    `select trim('H' from 'Hello worldH') from dual`

  - replace：替换

    `select replace('hello world', 'l', '*') from dual`

    删除字符串'hello world'中的字符'l'

    `select replace('hello world', 'l', '') from dual`

## 3 数值函数

- ROUND：四舍五入

  `ROUND(45.926, 2)	->	45.93`

- TRUNC：截断

  `TRUNC(45.926, 2)	->	45.92`

- MOD：求余

  `MOD(1600, 300)		->	100`

## 4 转换函数

- 隐式转换,由Oracle数据库来做

  显示转换,借助to_char(数据，格式)、to_number、to_date函数来完成转换

  - 如果隐式、显示都可以使用，应该首选显示，这样可以省去Oracle的解析过程

## 5 通用函数

- `NVL (expr1, expr2)`

  `NVL2 (expr1, expr2, expr3)`

  - nvl2 是 nvl 函数的增强版	
  - `nvl2(a, b, c)`	->	当a = null 返回c，否则返回b

- `NULLIF (expr1, expr2)`

  `nullif(a, b)` 	->	当 a = b 时返回null，不相等的时候返回a值

- 从左向右找参数中第一个不为空的值

  `COALESCE (expr1, expr2, ..., exprn)`

## 6 条件表达式

> 在SQL中实现if else 逻辑需求的时候，可以使用case或者decode

- case (是一个表达式)

  ```
  CASE expr WHEN comparison_expr1 THEN return_expr1
  	[WHEN comparison_expr2 THEN return_expr2
  	WHEN comparison_exprn THEN return_exprn 
  	ELSE else_expr]
  	END
  ```

  - `when then`与下一个`when then`以及`end`之间没有“,”分割符

  - 案例：

    ```
    select ename, job, sal 涨前薪水, case job
    	when 'PRESIDENT' then sal+1000
    	when 'MANAGER' then sal+800 
    	else sal + 400
    	end 涨后薪水
    	from emp
    ```

- decode (是一个函数)

  ```
  DECODE(col|expression, search1, result1
  	[, search2, result2,...,]
  	[, default])
  ```

  - 案例：

    ```
    select ename, job, sal 涨前薪水,
    	decode(job, 'PRESIDENT', sal + 1000,
    		'MANAGER', sal + 800, sal + 400) as 涨后薪水
    	from emp
    ```

