## 1 互斥锁概述

- pthread_mutex_t 类型

  - 本质是一个结构体，为简化理解，应用时可忽略其实现细节，简单当成整数看待

    ```
    pthread_mutex_t mutex; 	//变量mutex只有两种取值1、0
    ```

- 死锁

  - 第1种：自己锁自己
  - 第2种：线程A拥有A锁，请求获得B锁；线程B拥有B锁，请求获得A锁

- 互斥锁的使用步骤

  - 创建一把互斥锁

    ```
    pthread_mutex_t mutex;
    ```

  - 初始化互斥锁

    ```
    pthread_mutex_init(&mutex);		//相当于mutex=1
    ```

  - 在代码中寻找共享资源(也称为临界区)

    ```
    pthread_mutex_lock(&mutex);		//mutex = 0
    [临界区代码]
    pthread_mutex_unlock(&mutex);	//mutex = 1
    ```

  - 释放互斥锁资源

    ```
    pthread_mutex_destroy(&mutex);
    ```

## 2 互斥锁相关函数

- 初始化一个互斥锁(互斥量)

  ```
  int pthread_mutex_init(pthread_mutex_t *restrict mutex, 
  			 const pthread_mutexattr_t *restrict attr);
  --mutex：传出参数，调用时应传 &mutex，初值可看作1
  --attr：互斥锁属性。是一个传入参数，通常传NULL，选用默认属性(线程间共享)
  ```

  - restrict关键字：只用于限制指针，告诉编译器，所有修改该指针指向内存中内容的操作，只能通过本指针完成

  - 静态初始化

    `pthead_mutex_t muetx = PTHREAD_MUTEX_INITIALIZER;`

- 销毁一个互斥锁

  ```
  int pthread_mutex_destroy(pthread_mutex_t *mutex);
  --mutex：互斥锁变量
  ```

- 对互斥锁加锁，可理解为将mutex--

  ```
  int pthread_mutex_lock(pthread_mutex_t *mutex);
  ```

- 对互斥锁解锁，可理解为将mutex++

  ```
  int pthread_mutex_unlock(pthread_mutex_t *mutex);
  ```

  - 主动解锁，同时将阻塞在该锁上的所有线程全部唤醒，至于哪个线程先被唤醒，取决于优先级、调度
  - 默认：先阻塞、先唤醒

- 尝试加锁

  ```
  int pthread_mutex_trylock(pthread_mutex_t *mutex);
  ```

  - 尝试加锁，如果加锁不成功，线程阻塞，阻塞到持有该互斥量的其他线程解锁为止

