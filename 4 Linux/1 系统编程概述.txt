## 1 linux下的目录结构

- 根目录用 / 表示
- /bin	--binary，可执行二进制文件的目录，shell命令
- /sbin	--s指Super User，放置系统管理员使用的可执行命令，一般用户只能"查看"而不能设置和使用
- /dev	--device，存放linux系统下的设备文件，访问该目录下某个文件，相当于访问某个设备
- /lib	--系统使用的函数库的目录，linux运行的时候需要加载的一些动态库
- /mnt	--光盘默认挂载点，通常光盘挂载于 /mnt/cdrom 下
- /media	--外设的自动挂载目录, 如光驱等
- /root	--linux的超级用户root的家目录
- /usr	--unix system resource，应用程序存放目录
  - /usr/bin 存放应用程序，/usr/share 存放共享数据
- /etc	--系统配置文件存放的目录
- /opt	--给主机额外安装第三方应用程序所摆放的目录
- /home	--linux操作系统所有用户的家目录
- /tmp	--一般用户或正在执行的程序临时存放文件的目录
- /var	--放置系统执行过程中经常变化的文件，如随时更改的日志文件

## 2 linux文件

- Unix/Linux系统中常用的文件类型有5种：普通文件、目录文件、设备文件、管道文件和链接文件
  - \-	--普通文件
  - d	--目录
  - l	--链接
  -  s	--套接字
  - p	--管道
  -  b	--块设备
  -  c	--字符设备
- 访问权限：读权限(r)，写权限(w)，可执行权限(x)

## 3 linux虚拟地址空间

> Linux每一个运行的程序（进程）操作系统都会为其分配一个0~4G的地址空间（虚拟地址空间）

- 进程的虚拟地址空间分为用户区和内核区
  - 其中内核区是受保护的, 用户是不能够对其进行读写操作的
  - 内核区中有进程管理, 进程管理中有一个区域就是PCB(本质是一个结构体)
  - PCB中有文件描述符表, 文件描述符表中存放着打开的文件描述符, 涉及到文件的IO操作都会用到这个文件描述符

## 4 命令解析器

> shell就是命令解释器，作用是对用户输入到终端的命令进行解析，调用对应的执行程序
>
> shell在寻找命令的时候是按照$PATH环境变量去查找

- 查看当前系统所使用的shell：`echo $SHELL`

- 用户在终端输入命令, 由shell命令解释器对命令进行解析，解析成内核能够识别的指令,然后由内核执行命令, 最后由终端显示命令执行的结果给用户

## 5 linux通配符

- \*	代表文件名中所有字符

  - `ls te*`	查找以te开头的文件
  - `ls *html`	查找结尾为html的文件

- ？	代表文件名中任意一个字符

  - `ls ?.c`	只找第一个字符任意，后缀为.c的文件
  - `ls a.?`	只找只有3个字符，前2字符为"a."，最后一个字符任意的文件

- []	[”和“]”将字符组括起来，表示可以匹配字符组中的任意一个

  “-”用于表示字符范围

  - `[abc]`	匹配a、b、c中的任意一个
  - `[a-f]`	匹配从a到f范围内的的任意一个字符
  - `ls [a-f]*`	找到从a到f范围内的的任意一个字符开头的文件
  - `ls a-f`	查找文件名为a-f的文件,当“-”处于方括号之外失去通配符的作用

- \	如果要使通配符作为普通字符使用，可以在其前面加上转义字符

  - `ls \*a`	查找文件名为*a的文件

- “?”和“*”处于方括号内时不用使用转义字符就失去通配符的作用



## 6 库

> 库是二进制文件，是源代码文件的另一种表现形式，是加了密的源代码
>
> 库是一些功能相近或者是相似的函数的集合体

- 优点：提高代码的可重用性，缩短开发周期，提高程序的健壮性
- 库可分静态库(static library)和共享库(shared library)
  - 头文件	--包含了库函数的声明
  - 库文件	--包含了库函数的代码实现



