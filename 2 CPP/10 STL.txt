## 1 STL

> STL(Standard Template Library,标准模板库)
>
> 从广义上分为: 容器(container) 算法(algorithm) 迭代器(iterator)

- 容器和算法之间通过迭代器进行无缝连接

- 六大组件：容器、算法、迭代器、仿函数、适配器（配接器）、空间配置器

  - 容器：各种数据结构，STL容器是一种class template

    如vector、list、deque、set、map等,用来存放数据

  - 算法：各种常用的算法，STL算法是一种function tempalte

    如sort、find、copy、for_each

  - 迭代器：是一种将operator* , operator-> , operator++,operator--等指针相关操作予以重载的class template. 所有STL容器都附带有自己专属的迭代器

  - 仿函数：行为类似函数，可作为算法的某种策略

  - 适配器：一种用来修饰容器或者仿函数或迭代器接口的东西

  - 空间配置器：负责空间的配置与管理

    配置器是一个实现了动态空间配置、空间管理、空间释放的class tempalte

> 容器通过空间配置器取得数据存储空间
>
> 算法通过迭代器存储容器中的内容
>
> 仿函数可以协助算法完成不同的策略的变化
>
> 适配器可以修饰仿函数

## 2 容器

- 常用的数据结构
  - 数组(array),链表(list),tree(树)，栈(stack),队列(queue),集合(set),映射表(map)
- 根据数据在容器中的排列特性，这些数据分为序列式容器和关联式容器两种
  - 序列式容器强调值的排序
    - 序列式容器中的每个元素均有固定的位置，除非用删除或插入的操作改变这个位置
    - Vector容器、Deque容器、List容器等
  - 关联式容器是非线性的树结构（二叉树）
    - 各元素之间没有严格的物理上的顺序关系，在值中选择一个值作为关键字key，这个关键字对值起到索引的作用，方便查找
    - Set/multiset容器 Map/multimap容器

## 3 算法

- 算法分为:质变算法和非质变算法
  - 质变算法：是指运算过程中会更改区间内的元素的内容
    - 例如拷贝，替换，删除等
  - 非质变算法：是指运算过程中不会更改区间内的元素内容
    - 例如查找、计数、遍历、寻找极值等

## 4 迭代器

> 提供一种方法，使之能够依序寻访某个容器所含的各个元素，而又无需暴露该容器的内部表示方式

- 输入迭代器	提供对数据的只读访问
- 输出迭代器	提供对数据的只写访问
- 前向迭代器	提供读写操作，并能向前推进迭代器
- 双向迭代器	提供读写操作，并能向前和向后操作
- 随机访问迭代器	提供读写操作，并能以跳跃的方式访问容器的任意数据，是功能最强的迭代器

> 示例：
>
> ```
> vector<int>::iterator pStart = v.begin();
> Vector<int>::iterator it1;	//it1的型别其实就是Int*
> ```

