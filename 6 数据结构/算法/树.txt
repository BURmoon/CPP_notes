```
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
```

## 建树

- 建树的伪代码

  ```
  //根据数组建立二叉树
  TreeNode* build(需要建树的数组元素) {
      if (数组为空) return nullptr;
      TreeNode *root = new TreeNode(根结点的值);
      root->left = build(左子树的数组元素);	//递归建立左子树
      root->right = build(右子树的数组元素);	//递归建立右子树
      return root;
  }
  ```

## 层次遍历

- 按照从上到下，从左到右的顺序遍历节点

```c++
//不需要确定当前遍历到了哪一层
void bfs() {
    vis[] = 0;
    queue<int> pq(start_val);
    while (!pq.empty()) {
        int cur = pq.front(); pq.pop();
        for (遍历cur所有的相邻节点nex) {
            if (nex节点有效 && vis[nex]==0){
                vis[nex] = 1;
                pq.push(nex)
            }
        }
    }
}

//需要确定遍历到哪一层
void bfs() {
    int level = 0;
    vis[] = 0; // or set
    queue<int> pq(original_val);
    while (!pq.empty()) {
        int sz = pq.size();
        while (sz--) {
                int cur = pq.front(); pq.pop();
            for (遍历cur所有的相邻节点nex) {
                if (nex节点有效 && vis[nex] == 0) {
                    vis[nex] = 1;
                    pq.push(nex)
                }
            } // end for
        } // end inner while
        level++;
    } // end outer while
}
```

## 求树的最大深度

```c++
int TreeDepth(TreeNode* pRoot)
{
        if (!pRoot) return 0;
        int lval = TreeDepth(pRoot->left);
        int rval = TreeDepth(pRoot->right);
        return max(lval, rval) + 1;
}
```







