## 描述

- 现象

  简单UDP服务端，当进程启动后首次接收到数据的IP地址为0.0.0.0，端口号为0，之后的客户端连接则正常显示IP地址及端口号

- 解决

  在recvfrom()使用前确定address_len的大小：`address_len = sizeof(address);`

  函数原型

  `ssize_t recvfrom(int socket, void *restrict buffer, size_t length,  int flags, struct sockaddr *restrict address, socklen_t *restrict address_len);`

- 原因

  原先将address_len的长度赋值成0，从而导致第一次与客户端连接后其IP解析为0.0.0.0，之后address_len作为传入传出参数而被赋值为16正确长度，所以之后的客户端连接则正常解析IP地址

  - If the address argument is not a null pointer and the protocol provides the source address of messages, 

    如果地址参数不是空指针，并且协议提供了消息的源地址

  - the source address of the received message shall be stored in the sockaddr structure pointed to by the address argument,

    接收信息的源地址应该存储在地址参数所指向的sockaddr结构中

  - and the length of this address shall be stored in the object pointed to by the address_len argument

    并且这个地址的长度应该存储在address_len参数所指向的对象中

  - If the actual length of the address is greater than the length of the supplied  sockaddr structure, the stored address shall be truncated

    如果地址的实际长度大于提供的sockaddr结构的长度，存储的地址将被截断