## 问题 1

```
char *p;
p="abcd";				//OK，字符串赋值给字符指针变量
```

- 双引号做了3件事

  - 申请了空间(在常量区)，存放了字符串
  - 在字符串尾加上了'\0'
  - 返回地址

  这里就是返回的地址赋值给了p

## 问题 2

```
char *p = “hello”;		//OK
char a[10] = “hello”; 	//OK，这种情况是c语言初始化所支持的
char a[10];
a = "hello";			//ERROR
```

- 字符串常量"hello"出现在一个表达式中时，"hello"表达式使用的值就是这些字符所存储的地址（在常量区），而不是这些字符本身

  所以，可以把字符串赋值给指向字符的指针p，而不能把字符串赋值给一个字符数组

- `char a[10] = "hello";`

  这种是数组的初始化，和`a[0] = ‘h’`是一个道理

- `char a[10]; a = "hello";` 

  “hello”赋值的值是一个地址，而a虽然也有地址，但是这与指针是不一样的，不能给a赋值

  数组名的本质是代表数组对象的变量名，是一个左值，是一个不能被改变的左值

## 字符数组，字符指针，字符串常量

- 字符串

  > 以字符串形式出现的，编译器都会为该字符串自动添加一个0作为结束符

  - 字符串不是常量的情况

    "abc" 作为字符数组初始值的时候就不是，如：`char str[] = "abc";`
    - 因为定义的是一个字符数组，所以就相当于定义了一些空间来存放"abc"，而又因为字符数组就是把字符一个一个地存放的

      所以`char str[] = "abc";`的最终结果是：`char str[4] = {'a','b','c','\0'};`

    - 如果`char str[] = "abc";`是在函数内部写的话，那么这里的"abc\0"因为不是常量，所以应该被放在栈上

  - 字符串是常量的情况

     把"abc"赋给一个字符指针变量，如：`char* ptr = "abc";`

    - 因为定义的是一个普通字符指针，并没有定义空间来存放"abc"，编译器会"abc"当成常量并把它放到程序的常量区

      所以尽管ptr的类型不是const char*，并且`ptr[0] = 'x';`也能编译通过

      但是执行`ptr[0] = 'x';`就会发生运行时异常，因为这个语句试图去修改程序常量区中的东西

    - 如果`char* ptr = "abc";`写在函数体内，那么虽然这里的"abc\0"被放在常量区中，但是ptr本身只是一个普通的指针变量，所以ptr是被放在栈上的，只不过是它所指向的东西被放在常量区罢了

- 字符数组的类型

  > 数组的类型是由该数组所存放的东西的类型以及数组本身的大小决定的

  - 如`char s1[3]`和`char s2[4]`，s1的类型就是char[3]，s2的类型就是char[4]

    即尽管s1和s2都是字符数组，但两者的类型却是不同的	

  - 对于函数参数列表中的以数组类型书写的形式参数，编译器把其解释为普通的指针类型

    对于`void func(char sa[10],int ia[20],char *p)`，则sa的类型为char\*，ia的类型为int\*，p的类型为char*

