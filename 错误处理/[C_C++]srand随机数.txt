## 原型

`void srand(unsigned int seed)`

`void rand(void)`

实际应用：

```
srand((unsigned int)time(NULL));	//随机种子只需要设置一次即可
int r = rand();						//得到随机数
```

### 1 关于srand

```
void srand(unsigned int seed);
参数：如果每次seed相等，rand()产生随机数相等
返回值：无
```

- srand函数是随机数发生器的初始化函数，用来设置rand()产生随机数时的随机种子

- seed相当于一个种子，srand函数根据这个种子seed，设置一个随机起点

  rand函数根据这个随机起点，返回一个随机数[seed,RAND_MAX]，其中RAND_MAX是0x7ffff

  但是该随机数是一个伪的随机数（多次编译产生的随机数是一样的，除非给一个变化的种子）

### 2 关于rand

```
int rand(void);
返回值：随机数
```

- rand函数每一次被调用的时候，它都会查看之前是否调用了srand函数
  - 如果调用了，则会调用srand(seed)来初始化它的随机值
  - 如果没有调用，则会默认的调用srand(1)来初始化它的随机值

### 3 关于time

```
time_t time(time_t *t);
参数：常设置为NULL
返回值：当前系统时间, time_t相当于long类型，单位为毫秒
```

- time函数可以获取当前的系统时间，使得种子为一个不固定的数，这样产生的随机数就不会每次执行都一样
  - 获取的是秒数，是从1970年1月1日零时零分零秒到目前为止所经过的时间

### 4 关于优先级

- 函数的参数：(unsigned int)time(NULL)

  从优先级的角度看，这些都是单目运算符，单目运算符的处理顺序是从右往左的

  所以对于time函数，给了一个参数为0的值，返回一个当前系统时间的秒数，然后在将其强转为unsigned int类型

  

